import React, { useState } from 'react';
import { 
  Home, 
  Book, 
  Calculator, 
  Users, 
  Globe, 
  Shield, 
  MessageCircle, 
  ArrowLeft 
} from 'lucide-react';

// Multilingual Content
const translations = {
  en: {
    nav: {
      home: "Home",
      education: "Education",
      tools: "Tools",
      community: "Community"
    },
    home: {
      title: "Empowering Rural Women Through Financial Knowledge",
      subtitle: "Personalized financial guidance for rural women entrepreneurs",
      features: {
        education: "Financial Education",
        tools: "Financial Tools",
        community: "Community Support"
      }
    },
    tools: {
      title: "Financial Tools",
      budgetSimulator: {
        title: "Budget Simulator",
        description: "Plan and track your business expenses",
        incomeLabel: "Monthly Income",
        expensesLabel: "Monthly Expenses",
        savingsLabel: "Potential Savings",
        calculateButton: "Calculate"
      },
      loanCalculator: {
        title: "Loan Calculator",
        description: "Estimate loan repayments and options",
        loanAmountLabel: "Loan Amount",
        interestRateLabel: "Annual Interest Rate",
        loanTermLabel: "Loan Term (Months)",
        calculateButton: "Estimate Repayment"
      },
      savingsPlanner: {
        title: "Savings Planner",
        description: "Set and track financial goals",
        currentSavingsLabel: "Current Savings",
        monthlySavingsLabel: "Monthly Savings",
        targetGoalLabel: "Target Goal",
        calculateButton: "Project Savings"
      }
    }
  },
  hi: {
    nav: {
      home: "मुख्य पृष्ठ",
      education: "शिक्षा",
      tools: "उपकरण",
      community: "समुदाय"
    },
    home: {
      title: "वित्तीय ज्ञान के माध्यम से ग्रामीण महिलाओं को सशक्त बनाना",
      subtitle: "ग्रामीण महिला उद्यमियों के लिए व्यक्तिगत वित्तीय मार्गदर्शन",
      features: {
        education: "वित्तीय शिक्षा",
        tools: "वित्तीय उपकरण",
        community: "समुदाय समर्थन"
      }
    },
    tools: {
      title: "वित्तीय उपकरण",
      budgetSimulator: {
        title: "बजट सिमुलेटर",
        description: "अपने व्यावसायिक खर्चों की योजना बनाएं और उनका पालन करें",
        incomeLabel: "मासिक आय",
        expensesLabel: "मासिक खर्च",
        savingsLabel: "संभावित बचत",
        calculateButton: "गणना करें"
      },
      loanCalculator: {
        title: "ऋण कैलकुलेटर",
        description: "ऋण पुनर्भुगतान और विकल्पों का अनुमान लगाएं",
        loanAmountLabel: "ऋण राशि",
        interestRateLabel: "वार्षिक ब्याज दर",
        loanTermLabel: "ऋण अवधि (महीने)",
        calculateButton: "पुनर्भुगतान का अनुमान लगाएं"
      },
      savingsPlanner: {
        title: "बचत योजनाकार",
        description: "वित्तीय लक्ष्य निर्धारित करें और उनका पालन करें",
        currentSavingsLabel: "वर्तमान बचत",
        monthlySavingsLabel: "मासिक बचत",
        targetGoalLabel: "लक्ष्य",
        calculateButton: "बचत का अनुमान लगाएं"
      }
    }
  },
  or: {
    nav: {
      home: "ମୂଳ ପୃଷ୍ଠା",
      education: "ଶିକ୍ଷା",
      tools: "ଉପକରଣ",
      community: "ସମ୍ପ୍ରଦାୟ"
    },
    home: {
      title: "ଆର୍ଥିକ ଜ୍ଞାନ ମାଧ୍ୟମରେ ଗ୍ରାମ୍ୟ ମହିଳାଙ୍କୁ ସଶକ୍ତ କରିବା",
      subtitle: "ଗ୍ରାମ୍ୟ ମହିଳା ଉଦ୍ୟୋଗୀଙ୍କ ପାଇଁ ବ୍ୟକ୍ତିଗତ ଆର୍ଥିକ ପରାମର୍ଶ",
      features: {
        education: "ଆର୍ଥିକ ଶିଷ୍ଟାଚାର",
        tools: "ଆର୍ଥିକ ଉପକରଣ",
        community: "ସମ୍ପ୍ରଦାୟ ସହାୟତା"
      }
    },
    tools: {
      title: "ଆର୍ଥିକ ଉପକରଣ",
      budgetSimulator: {
        title: "ବଜେଟ୍ ସିମୁଲେଟର୍",
        description: "ଆପଣଙ୍କ ବ୍ୟବସାୟୀକ ଖର୍ଚ୍ଚ ପରିକଳ୍ପନା କରନ୍ତୁ ଏବଂ ଅନୁଧ୍ୟାନ କରନ୍ତୁ",
        incomeLabel: "ମାସିକ ଆୟ",
        expensesLabel: "ମାସିକ ଖର୍ଚ୍ଚ",
        savingsLabel: "ସମ୍ଭାବ୍ୟ ସଞ୍ଚୟ",
        calculateButton: "ଗଣନା କରନ୍ତୁ"
      },
      loanCalculator: {
        title: "ଋଣ କ୍ୟାଲକୁଲେଟର୍",
        description: "ଋଣ ପୁନଃ ପ୍ରଦାନ ଏବଂ ବିକଳ୍ପଗୁଡ଼ିକର ଅନୁମାନ",
        loanAmountLabel: "ଋଣ ପରିମାଣ",
        interestRateLabel: "ବାର୍ଷିକ ସୁଧ ହାର",
        loanTermLabel: "ଋଣ ସମୟ (ମାସ)",
        calculateButton: "ପୁନଃ ପ୍ରଦାନ ଅନୁମାନ"
      },
      savingsPlanner: {
        title: "ସଞ୍ଚୟ ଯୋଜନାକାର",
        description: "ଆର୍ଥିକ ଲକ୍ଷ୍ୟ ସ୍ଥିର କରନ୍ତୁ ଏବଂ ଅନୁଧ୍ୟାନ କରନ୍ତୁ",
        currentSavingsLabel: "ବର୍ତ୍ତମାନ ସଞ୍ଚୟ",
        monthlySavingsLabel: "ମାସିକ ସଞ୍ଚୟ",
        targetGoalLabel: "ଲକ୍ଷ୍ୟ",
        calculateButton: "ସଞ୍ଚୟ ଅନୁମାନ"
      }
    }
  }
};

// Financial Tools Component with Interactive Calculators
const FinancialToolsPage = ({ language }) => {
  const [budgetData, setBudgetData] = useState({
    monthlyIncome: 0,
    monthlyExpenses: 0
  });

  const [loanData, setLoanData] = useState({
    loanAmount: 0,
    interestRate: 0,
    loanTerm: 0
  });

  const [savingsData, setSavingsData] = useState({
    currentSavings: 0,
    monthlySavings: 0,
    targetGoal: 0
  });

  const calculateBudget = () => {
    const potentialSavings = budgetData.monthlyIncome - budgetData.monthlyExpenses;
    return Math.max(0, potentialSavings);
  };

  const calculateLoanRepayment = () => {
    const monthlyInterestRate = loanData.interestRate / 12 / 100;
    const monthlyPayment = loanData.loanAmount * 
      (monthlyInterestRate * Math.pow(1 + monthlyInterestRate, loanData.loanTerm)) / 
      (Math.pow(1 + monthlyInterestRate, loanData.loanTerm) - 1);
    return isNaN(monthlyPayment) ? 0 : monthlyPayment.toFixed(2);
  };

  const calculateSavingsProjection = () => {
    const monthsToGoal = (savingsData.targetGoal - savingsData.currentSavings) / 
      savingsData.monthlySavings;
    return isNaN(monthsToGoal) ? 0 : Math.ceil(monthsToGoal);
  };

  const t = translations[language].tools;

  return (
    <div className="container mx-auto p-8">
      <h1 className="text-3xl font-bold mb-6">{t.title}</h1>
      
      <div className="grid md:grid-cols-3 gap-6">
        {/* Budget Simulator */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">{t.budgetSimulator.title}</h2>
          <p className="mb-4">{t.budgetSimulator.description}</p>
          
          <div className="space-y-4">
            <div>
              <label className="block mb-2">{t.budgetSimulator.incomeLabel}</label>
              <input 
                type="number" 
                value={budgetData.monthlyIncome}
                onChange={(e) => setBudgetData({
                  ...budgetData, 
                  monthlyIncome: parseFloat(e.target.value) || 0
                })}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <label className="block mb-2">{t.budgetSimulator.expensesLabel}</label>
              <input 
                type="number" 
                value={budgetData.monthlyExpenses}
                onChange={(e) => setBudgetData({
                  ...budgetData, 
                  monthlyExpenses: parseFloat(e.target.value) || 0
                })}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <p className="font-bold">
                {t.budgetSimulator.savingsLabel}: 
                {calculateBudget()}
              </p>
            </div>
            <button 
              onClick={() => {}}
              className="w-full bg-green-500 text-white p-2 rounded"
            >
              {t.budgetSimulator.calculateButton}
            </button>
          </div>
        </div>

        {/* Loan Calculator */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">{t.loanCalculator.title}</h2>
          <p className="mb-4">{t.loanCalculator.description}</p>
          
          <div className="space-y-4">
            <div>
              <label className="block mb-2">{t.loanCalculator.loanAmountLabel}</label>
              <input 
                type="number" 
                value={loanData.loanAmount}
                onChange={(e) => setLoanData({
                  ...loanData, 
                  loanAmount: parseFloat(e.target.value) || 0
                })}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <label className="block mb-2">{t.loanCalculator.interestRateLabel}</label>
              <input 
                type="number" 
                value={loanData.interestRate}
                onChange={(e) => setLoanData({
                  ...loanData, 
                  interestRate: parseFloat(e.target.value) || 0
                })}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <label className="block mb-2">{t.loanCalculator.loanTermLabel}</label>
              <input 
                type="number" 
                value={loanData.loanTerm}
                onChange={(e) => setLoanData({
                  ...loanData, 
                  loanTerm: parseFloat(e.target.value) || 0
                })}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <p className="font-bold">
                Monthly Repayment: {calculateLoanRepayment()}
              </p>
            </div>
            <button 
              onClick={() => {}}
              className="w-full bg-blue-500 text-white p-2 rounded"
            >
              {t.loanCalculator.calculateButton}
            </button>
          </div>
        </div>

        {/* Savings Planner */}
        <div className="bg-white p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-semibold mb-4">{t.savingsPlanner.title}</h2>
          <p className="mb-4">{t.savingsPlanner.description}</p>
          
          <div className="space-y-4">
            <div>
              <label className="block mb-2">{t.savingsPlanner.currentSavingsLabel}</label>
              <input 
                type="number" 
                value={savingsData.currentSavings}
                onChange={(e) => setSavingsData({
                  ...savingsData, 
                  currentSavings: parseFloat(e.target.value) || 0
                })}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <label className="block mb-2">{t.savingsPlanner.monthlySavingsLabel}</label>
              <input 
                type="number" 
                value={savingsData.monthlySavings}
                onChange={(e) => setSavingsData({
                  ...savingsData, 
                  monthlySavings: parseFloat(e.target.value) || 0
                })}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <label className="block mb-2">{t.savingsPlanner.targetGoalLabel}</label>
              <input 
                type="number" 
                value={savingsData.targetGoal}
                onChange={(e) => setSavingsData({
                  ...savingsData, 
                  targetGoal: parseFloat(e.target.value) || 0
                })}
                className="w-full p-2 border rounded"
              />
            </div>
            <div>
              <p className="font-bold">
                Months to Reach Goal: {calculateSavingsProjection()}
              </p>
            </div>
            <button 
              onClick={() => {}}
              className="w-full bg-purple-500 text-white p-2 rounded"
            >
              {t.savingsPlanner.calculateButton}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main Application Component (Simplified for brevity)
const FinancialEmpowermentPlatform = () => {
  const [language, setLanguage] = useState('en');
  const [currentPage, setCurrentPage] = useState('home');

  // Render the appropriate page based on currentPage
  const renderPage = () => {
    const t = translations[language].home;
    
    switch(currentPage) {
      case 'home':
        return (
          <>
            <header className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white text-center py-16">
              <div className="container mx-auto">
                <h2 className="text-4xl font-bold mb-4">{t.title}</h2>
                <p className="text-xl mb-8">{t.subtitle}</p>
              </div>
            </header>

            <section className="container mx-auto py-16 px-4">
              <div className="grid md:grid-cols-3 gap-6">
                <div 
                  onClick={() => setCurrentPage('education')} 
                  className="hover:scale-105 transition-transform cursor-pointer"
                >
                  <div className="bg-white p-6 rounded-lg shadow-md text-center">
                    <Book className="w-12 h-12 text-indigo-600 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold">{t.features.education}</h3>
                  </div>
                </div>
                <div 
                  onClick={() => setCurrentPage('tools')} 
                  className="hover:scale-105 transition-transform cursor-pointer"
                >
                  <div className="bg-white p-6 rounded-lg shadow-md text-center">
                    <Calculator className="w-12 h-12 text-green-600 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold">{t.features.tools}</h3>
                  </div>
                </div>
                <div 
                  onClick={() => setCurrentPage('community')} 
                  className="hover:scale-105 transition-transform cursor-pointer"
                >
                  <div className="bg-white p-6 rounded-lg shadow-md text-center">
                    <Users className="w-12 h-12 text-blue-600 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold">{t.features.community}</h3>
                  </div>
                </div>
              </div>
            </section>
          </>
        );
      case 'tools':
        return <FinancialToolsPage language={language} />;
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 font-sans">
      {/* Navigation */}
      <nav className="bg-indigo-600 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <button 
            onClick={() => setCurrentPage('home')} 
            className="text-2xl font-bold"
          >
            Shakti Financial
          </button>
          <div className="flex items-center space-x-4">
            <select 
              value={language} 
              onChange={(e) => setLanguage(e.target.value)}
              className="bg-indigo-700 text-white p-2 rounded"
            >
              <option value="en">English</option>
              <option value="hi">हिन्दी</option>
              <option value="or">ଓଡ଼ିଆ</option>
            </select>
          </div>
        </div>
      </nav>

      {/* Page Content */}
      {renderPage()}

      {/* Footer */}
      <footer className="bg-gray-800 text-white py-8">
        <div className="container mx-auto text-center">
          <p>&copy; 2024 Shakti Financial Empowerment. All Rights Reserved.</p>
        </div>
      </footer>
    </div>
  );
};

export default FinancialEmpowermentPlatform;
